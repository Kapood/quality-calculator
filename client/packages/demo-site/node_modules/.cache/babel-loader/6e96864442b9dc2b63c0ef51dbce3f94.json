{"ast":null,"code":"import _asyncToGenerator from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/regenerator/index.js\";import{jsonDateParser}from\"json-date-parser\";import{getDb}from\"./database\";function querySql(_x){return _querySql.apply(this,arguments);}function _querySql(){_querySql=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(sql){var db,started,result,finished;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return getDb();case 2:db=_context.sent;started=new Date();result=JSON.stringify(db.exec(sql));finished=new Date();console.log(\"SQL query took \".concat(finished.getTime()-started.getTime(),\" ms\"));if(sql.includes(\"allbugs\")){console.log(sql);}return _context.abrupt(\"return\",result);case 9:case\"end\":return _context.stop();}}},_callee);}));return _querySql.apply(this,arguments);}window.querySql=querySql;var blazorReady=new Promise(function(done){return window.notifyBlazorReady=done;});export function localFetch(_x2){return _localFetch.apply(this,arguments);}function _localFetch(){_localFetch=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(queryJson){var started,json,finished,parsed,columns,values,firstValueIndex,endOfSelects,result;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return blazorReady;case 2:started=new Date();_context2.next=5;return DotNet.invokeMethodAsync(\"FlowerBI.WasmHost\",\"Query\",JSON.stringify(queryJson));case 5:json=_context2.sent;finished=new Date();console.log(queryJson.comment,\"Blazor + SQL query took \".concat(finished.getTime()-started.getTime(),\" ms\"),queryJson);parsed=JSON.parse(json,jsonDateParser);if(!parsed.stackTrace){_context2.next=12;break;}console.error(parsed);return _context2.abrupt(\"return\",{records:[]});case 12:if(parsed[0]){_context2.next=15;break;}console.error(parsed);return _context2.abrupt(\"return\",{records:[]});case 15:columns=parsed[0].columns;values=parsed[0].values;firstValueIndex=columns.indexOf(\"Value0\");endOfSelects=firstValueIndex===-1?columns.length:firstValueIndex;result={records:values.map(function(x){return{selected:x.slice(0,endOfSelects),aggregated:x.slice(endOfSelects)};})};if(parsed[1]){result.totals={selected:[],aggregated:parsed[1].values};}return _context2.abrupt(\"return\",result);case 22:case\"end\":return _context2.stop();}}},_callee2);}));return _localFetch.apply(this,arguments);}","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/localFetch.ts"],"names":["jsonDateParser","getDb","querySql","sql","db","started","Date","result","JSON","stringify","exec","finished","console","log","getTime","includes","window","blazorReady","Promise","done","notifyBlazorReady","localFetch","queryJson","DotNet","invokeMethodAsync","json","comment","parsed","parse","stackTrace","error","records","columns","values","firstValueIndex","indexOf","endOfSelects","length","map","x","selected","slice","aggregated","totals"],"mappings":"+QAAA,OAASA,cAAT,KAA+B,kBAA/B,CACA,OAASC,KAAT,KAAsB,YAAtB,C,QAGeC,CAAAA,Q,oIAAf,iBAAwBC,GAAxB,uKAEqBF,CAAAA,KAAK,EAF1B,QAEUG,EAFV,eAIUC,OAJV,CAIoB,GAAIC,CAAAA,IAAJ,EAJpB,CAKUC,MALV,CAKmBC,IAAI,CAACC,SAAL,CAAeL,EAAE,CAACM,IAAH,CAAQP,GAAR,CAAf,CALnB,CAMUQ,QANV,CAMqB,GAAIL,CAAAA,IAAJ,EANrB,CAOIM,OAAO,CAACC,GAAR,0BAA8BF,QAAQ,CAACG,OAAT,GAAqBT,OAAO,CAACS,OAAR,EAAnD,SACA,GAAIX,GAAG,CAACY,QAAJ,CAAa,SAAb,CAAJ,CAA6B,CACzBH,OAAO,CAACC,GAAR,CAAYV,GAAZ,EACH,CAVL,gCAWWI,MAXX,wD,2CAcCS,MAAD,CAAgBd,QAAhB,CAA2BA,QAA3B,CAEA,GAAMe,CAAAA,WAAW,CAAG,GAAIC,CAAAA,OAAJ,CAAY,SAAAC,IAAI,QAAKH,CAAAA,MAAD,CAAgBI,iBAAhB,CAAoCD,IAAxC,EAAhB,CAApB,CAEA,eAAsBE,CAAAA,UAAtB,gD,2FAAO,kBAA0BC,SAA1B,iOAEGL,CAAAA,WAFH,QAIGZ,OAJH,CAIa,GAAIC,CAAAA,IAAJ,EAJb,wBAKgBiB,CAAAA,MAAM,CAACC,iBAAP,CACf,mBADe,CACM,OADN,CACehB,IAAI,CAACC,SAAL,CAAea,SAAf,CADf,CALhB,QAKGG,IALH,gBAQGd,QARH,CAQc,GAAIL,CAAAA,IAAJ,EARd,CASHM,OAAO,CAACC,GAAR,CAAYS,SAAS,CAACI,OAAtB,mCAA0Df,QAAQ,CAACG,OAAT,GAAqBT,OAAO,CAACS,OAAR,EAA/E,QAAuGQ,SAAvG,EAEMK,MAXH,CAWYnB,IAAI,CAACoB,KAAL,CAAWH,IAAX,CAAiBzB,cAAjB,CAXZ,KAaC2B,MAAM,CAACE,UAbR,2BAcCjB,OAAO,CAACkB,KAAR,CAAcH,MAAd,EAdD,iCAeQ,CAAEI,OAAO,CAAE,EAAX,CAfR,aAkBEJ,MAAM,CAAC,CAAD,CAlBR,2BAmBCf,OAAO,CAACkB,KAAR,CAAcH,MAAd,EAnBD,iCAoBQ,CAAEI,OAAO,CAAE,EAAX,CApBR,UAuBGC,OAvBH,CAuBaL,MAAM,CAAC,CAAD,CAAN,CAAUK,OAvBvB,CAwBGC,MAxBH,CAwBYN,MAAM,CAAC,CAAD,CAAN,CAAUM,MAxBtB,CAyBGC,eAzBH,CAyBqBF,OAAO,CAACG,OAAR,CAAgB,QAAhB,CAzBrB,CA0BGC,YA1BH,CA0BkBF,eAAe,GAAK,CAAC,CAArB,CAAyBF,OAAO,CAACK,MAAjC,CAA0CH,eA1B5D,CA4BG3B,MA5BH,CA4B6B,CAC5BwB,OAAO,CAAEE,MAAM,CAACK,GAAP,CAAW,SAAAC,CAAC,QAAK,CACtBC,QAAQ,CAAED,CAAC,CAACE,KAAF,CAAQ,CAAR,CAAWL,YAAX,CADY,CAEtBM,UAAU,CAAEH,CAAC,CAACE,KAAF,CAAQL,YAAR,CAFU,CAAL,EAAZ,CADmB,CA5B7B,CAmCH,GAAIT,MAAM,CAAC,CAAD,CAAV,CAAe,CACXpB,MAAM,CAACoC,MAAP,CAAgB,CACZH,QAAQ,CAAE,EADE,CAEZE,UAAU,CAAEf,MAAM,CAAC,CAAD,CAAN,CAAUM,MAFV,CAAhB,CAIH,CAxCE,iCA0CI1B,MA1CJ,2D","sourcesContent":["import { jsonDateParser } from \"json-date-parser\";\nimport { getDb } from \"./database\";\nimport { QueryResultJson, QuerySelectValue, QueryJson } from \"flowerbi\";\n\nasync function querySql(sql: string) {\n    \n    const db = await getDb();\n\n    const started = new Date();\n    const result = JSON.stringify(db.exec(sql));\n    const finished = new Date();\n    console.log(`SQL query took ${finished.getTime() - started.getTime()} ms`);\n    if (sql.includes(\"allbugs\")) {\n        console.log(sql);\n    }\n    return result;\n}\n\n(window as any).querySql = querySql;\n\nconst blazorReady = new Promise(done => (window as any).notifyBlazorReady = done);\n\nexport async function localFetch(queryJson: QueryJson): Promise<QueryResultJson> {\n\n    await blazorReady;\n\n    const started = new Date();    \n    const json = await DotNet.invokeMethodAsync(\n        \"FlowerBI.WasmHost\", \"Query\", JSON.stringify(queryJson)\n    ) as string;    \n    const finished = new Date();\n    console.log(queryJson.comment, `Blazor + SQL query took ${finished.getTime() - started.getTime()} ms`, queryJson);\n\n    const parsed = JSON.parse(json, jsonDateParser);\n\n    if (parsed.stackTrace) {\n        console.error(parsed);\n        return { records: [] };\n    }\n\n    if (!parsed[0]) {\n        console.error(parsed);\n        return { records: [] };\n    }\n\n    const columns = parsed[0].columns;\n    const values = parsed[0].values as QuerySelectValue[][];\n    const firstValueIndex = columns.indexOf(\"Value0\");\n    const endOfSelects = firstValueIndex === -1 ? columns.length : firstValueIndex;\n\n    const result: QueryResultJson = {\n        records: values.map(x => ({\n            selected: x.slice(0, endOfSelects),\n            aggregated: x.slice(endOfSelects) as number[]\n        }))\n    };\n    \n    if (parsed[1]) {\n        result.totals = {\n            selected: [],\n            aggregated: parsed[1].values\n        };\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"module"}