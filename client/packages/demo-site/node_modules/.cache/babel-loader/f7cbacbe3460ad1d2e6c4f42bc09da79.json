{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _asyncToGenerator from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/regenerator/index.js\";import moment from\"moment\";function allocDb(){return _allocDb.apply(this,arguments);}function _allocDb(){_allocDb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var publicUrl,SQL,db;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:publicUrl=window.sitePublicUrl;_context.next=3;return window.initSqlJs({locateFile:function locateFile(f){return\"\".concat(publicUrl,\"/\").concat(f);}});case 3:SQL=_context.sent;db=new SQL.Database();setupDb(db);return _context.abrupt(\"return\",db);case 7:case\"end\":return _context.stop();}}},_callee);}));return _allocDb.apply(this,arguments);}var db;export function getDb(){if(!db){db=allocDb();}return db;}function makeRandomDate(){var d=new Date(2018,0,1);d.setDate(d.getDate()+Math.floor(Math.random()*800));return d;}function formatDate(d){return moment(d).format(\"YYYY-MM-DD\");}function startOfQuarter(d){var m=Math.floor(d.getMonth()/3)*3;return formatDate(new Date(d.getFullYear(),m,1));}function startOfMonth(d){return formatDate(new Date(d.getFullYear(),d.getMonth(),1));}function pick(count,base){return Math.min(count-1,Math.floor(Math.random()*count))+base;}function setupDb(db){var workflowStates=[\"Ignored\",\"Prioritised\",\"Assigned\",\"Fixed\",\"AsDesigned\"];var sourcesOfError=[\"Design flaw\",\"Hackers\",\"Honest mistake\"];var dates=[];for(var _n=0;_n<50;_n++){dates.push(makeRandomDate());}var dateRows=dates.map(function(x){return\"\\n        ('\".concat(formatDate(x),\"', \").concat(x.getFullYear(),\", '\").concat(startOfQuarter(x),\"', '\").concat(startOfMonth(x),\"')\");}).join(\",\");var workflows=[];for(var _i=0,_workflowStates=workflowStates;_i<_workflowStates.length;_i++){var workflowState=_workflowStates[_i];var _iterator=_createForOfIteratorHelper(sourcesOfError),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var sourceOfError=_step.value;for(var _i2=0,_arr=[0,1];_i2<_arr.length;_i2++){var resolved=_arr[_i2];for(var _i3=0,_arr2=[0,1];_i3<_arr2.length;_i3++){var fixedByCustomer=_arr2[_i3];workflows.push(\"\\n                        (\".concat(workflows.length+1,\", \").concat(resolved,\", '\").concat(workflowState,\"', '\").concat(sourceOfError,\"', \").concat(fixedByCustomer,\")\"));}}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}var workflowRows=workflows.join(\",\");var categoryCombinations=[];for(var _i4=0,_arr3=[0,1];_i4<_arr3.length;_i4++){var a=_arr3[_i4];for(var _i5=0,_arr4=[0,1];_i5<_arr4.length;_i5++){var b=_arr4[_i5];for(var _i6=0,_arr5=[0,1];_i6<_arr5.length;_i6++){var c=_arr5[_i6];for(var _i7=0,_arr6=[0,1];_i7<_arr6.length;_i7++){var d=_arr6[_i7];for(var _i8=0,_arr7=[0,1];_i8<_arr7.length;_i8++){var e=_arr7[_i8];for(var _i9=0,_arr8=[0,1];_i9<_arr8.length;_i9++){var f=_arr8[_i9];categoryCombinations.push(\"\\n                                (\".concat(categoryCombinations.length,\", \").concat(a,\", \").concat(b,\", \").concat(c,\", \").concat(d,\", \").concat(e,\", \").concat(f,\")\"));}}}}}}var categoryCombinationsRows=categoryCombinations.join(\",\");var bugs=[];for(var n=0;n<100;n++){var workflow=pick(workflows.length,1);var customer=pick(6,1);var reported=formatDate(dates[pick(dates.length,0)]);var _resolved=formatDate(dates[pick(dates.length,0)]);var assigned=formatDate(dates[pick(dates.length,0)]);var catComb=pick(categoryCombinations.length,1);var coderAssigned=pick(6,1);var coderResolved=pick(6,1);bugs.push(\"\\n            (\".concat(n+1,\", \").concat(workflow,\", \").concat(customer,\", '\").concat(reported,\"', '\").concat(_resolved,\"', '\").concat(assigned,\"', \").concat(catComb,\", \").concat(coderAssigned,\", \").concat(coderResolved,\")\"));}var bugRows=bugs.join(\",\");var initSql=\"\\n        create table `main`.`Date` (\\n            Id date,\\n            CalendarYearNumber smallint,\\n            FirstDayOfQuarter date,\\n            FirstDayOfMonth date\\n        );\\n\\n        insert into `main`.`Date` values \".concat(dateRows,\";\\n\\n        create table `main`.`Workflow` (\\n            Id int,\\n            Resolved bit,\\n            WorkflowState varchar(30),\\n            SourceOfError varchar(30),\\n            FixedByCustomer bit\\n        );\\n\\n        insert into `main`.`Workflow` values \").concat(workflowRows,\";\\n\\n        create table `main`.`Category` (\\n            Id int,\\n            Label varchar(30)\\n        );\\n\\n        insert into `main`.`Category` values\\n            (1, 'Crashed'),\\n            (2, 'Data Loss'),\\n            (3, 'Security Breach'),\\n            (4, 'Off By One'),\\n            (5, 'Slow'),\\n            (6, 'StackOverflow');\\n\\n        create table `main`.`Coder` (\\n            Id int,\\n            FullName varchar(30)\\n        );\\n    \\n        insert into `main`.`Coder` values\\n                (1, 'Sam'),\\n                (2, 'Alex'),\\n                (3, 'Drew'),\\n                (4, 'Taylor'),\\n                (5, 'Parker'),\\n                (6, 'Austin');\\n\\n        create table `main`.`Customer` (\\n            Id int,\\n            CustomerName varchar(30)\\n        );\\n    \\n        insert into `main`.`Customer` values\\n                (1, 'Pies LLC'),\\n                (2, 'Buns, Inc.'),\\n                (3, 'Hats-R-Us'),\\n                (4, 'Silence'),\\n                (5, 'Egypt'),\\n                (6, 'Affordability');\\n\\n        create table `main`.`CategoryCombination` (\\n            Id int,\\n            StackOverflow bit,\\n            Slow bit,\\n            OffByOne bit,\\n            SecurityBreach bit,\\n            DataLoss bit,\\n            Crashed bit\\n        );\\n\\n        insert into `main`.`CategoryCombination` values \").concat(categoryCombinationsRows,\";\\n\\n        create table `main`.`Bug` (\\n            Id int,\\n            WorkflowId int,\\n            CustomerId int,\\n            ReportedDate date,\\n            ResolvedDate date,\\n            AssignedDate date,\\n            CategoryCombinationId int,\\n            AssignedCoderId int,\\n            ResolvedCoderId int\\n        );\\n\\n        insert into `main`.`Bug` values \").concat(bugRows,\";\\n    \");db.run(initSql);}","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/database.ts"],"names":["moment","allocDb","publicUrl","window","sitePublicUrl","initSqlJs","locateFile","f","SQL","db","Database","setupDb","getDb","makeRandomDate","d","Date","setDate","getDate","Math","floor","random","formatDate","format","startOfQuarter","m","getMonth","getFullYear","startOfMonth","pick","count","base","min","workflowStates","sourcesOfError","dates","n","push","dateRows","map","x","join","workflows","workflowState","sourceOfError","resolved","fixedByCustomer","length","workflowRows","categoryCombinations","a","b","c","e","categoryCombinationsRows","bugs","workflow","customer","reported","assigned","catComb","coderAssigned","coderResolved","bugRows","initSql","run"],"mappings":"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","sourcesContent":["import moment from \"moment\";\n\nasync function allocDb() {\n    const publicUrl = (window as any).sitePublicUrl;\n\n    const SQL = await window.initSqlJs({\n        locateFile(f: string) {\n            return `${publicUrl}/${f}`;\n        }\n    });\n\n    const db = new SQL.Database();\n    setupDb(db);\n    return db;\n}\n\nlet db: ReturnType<typeof allocDb> | undefined;\n\ntype Await<T> = T extends {\n    then(onfulfilled?: (value: infer U) => unknown): unknown;\n} ? U : T;\n\nexport type Database = NonNullable<Await<typeof db>>;\n\nexport function getDb(): Promise<Database> {\n    if (!db) {\n        db = allocDb();\n    }\n    return db;\n}\n\nfunction makeRandomDate() {\n    const d = new Date(2018, 0, 1);\n    d.setDate(d.getDate() + Math.floor(Math.random() * 800));\n    return d;\n}\n\nfunction formatDate(d: Date) {\n    return moment(d).format(\"YYYY-MM-DD\");\n}\n\nfunction startOfQuarter(d: Date) {\n    const m = Math.floor(d.getMonth() / 3) * 3;\n    return formatDate(new Date(d.getFullYear(), m, 1));\n}\n\nfunction startOfMonth(d: Date) {    \n    return formatDate(new Date(d.getFullYear(), d.getMonth(), 1));\n}\n\nfunction pick(count: number, base: number) {\n     return Math.min(count - 1, Math.floor(Math.random() * count)) + base;     \n}\n\nfunction setupDb(db: Database) {\n\n    const workflowStates = [\n        \"Ignored\",\n        \"Prioritised\",\n        \"Assigned\",\n        \"Fixed\",\n        \"AsDesigned\"\n    ];\n\n    const sourcesOfError = [\n        \"Design flaw\",\n        \"Hackers\",\n        \"Honest mistake\"\n    ];\n\n    const dates: Date[] = [];\n    for (let n = 0; n < 50; n++) {\n        dates.push(makeRandomDate());\n    }\n\n    const dateRows = dates.map(x => `\n        ('${formatDate(x)}', ${x.getFullYear()}, '${startOfQuarter(x)}', '${startOfMonth(x)}')`).join(\",\");\n\n    const workflows: string[] = [];\n\n    for (const workflowState of workflowStates) {\n        for (const sourceOfError of sourcesOfError) {\n            for (const resolved of [0, 1]) {\n                for (const fixedByCustomer of [0, 1]) {\n                    workflows.push(`\n                        (${workflows.length + 1}, ${resolved}, '${workflowState}', '${sourceOfError}', ${fixedByCustomer})`);\n                }\n            }\n        }\n    }\n\n    const workflowRows = workflows.join(\",\");\n\n    const categoryCombinations: string[] = [];\n\n    for (const a of [0, 1]) {\n        for (const b of [0, 1]) {\n            for (const c of [0, 1]) {\n                for (const d of [0, 1]) {\n                    for (const e of [0, 1]) {\n                        for (const f of [0, 1]) {\n                            categoryCombinations.push(`\n                                (${categoryCombinations.length}, ${a}, ${b}, ${c}, ${d}, ${e}, ${f})`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const categoryCombinationsRows = categoryCombinations.join(\",\");\n\n    const bugs: string[] = [];\n\n    for (var n = 0; n < 100; n++) {\n        const workflow = pick(workflows.length, 1);\n        const customer = pick(6, 1);\n        const reported = formatDate(dates[pick(dates.length, 0)]);\n        const resolved = formatDate(dates[pick(dates.length, 0)]);\n        const assigned = formatDate(dates[pick(dates.length, 0)]);\n        const catComb = pick(categoryCombinations.length, 1);\n        const coderAssigned = pick(6, 1);\n        const coderResolved = pick(6, 1);\n\n        bugs.push(`\n            (${n + 1}, ${workflow}, ${customer}, '${reported}', '${resolved}', '${assigned}', ${catComb}, ${coderAssigned}, ${coderResolved})`);\n    }\n\n    const bugRows = bugs.join(\",\");\n\n    const initSql = `\n        create table \\`main\\`.\\`Date\\` (\n            Id date,\n            CalendarYearNumber smallint,\n            FirstDayOfQuarter date,\n            FirstDayOfMonth date\n        );\n\n        insert into \\`main\\`.\\`Date\\` values ${dateRows};\n\n        create table \\`main\\`.\\`Workflow\\` (\n            Id int,\n            Resolved bit,\n            WorkflowState varchar(30),\n            SourceOfError varchar(30),\n            FixedByCustomer bit\n        );\n\n        insert into \\`main\\`.\\`Workflow\\` values ${workflowRows};\n\n        create table \\`main\\`.\\`Category\\` (\n            Id int,\n            Label varchar(30)\n        );\n\n        insert into \\`main\\`.\\`Category\\` values\n            (1, 'Crashed'),\n            (2, 'Data Loss'),\n            (3, 'Security Breach'),\n            (4, 'Off By One'),\n            (5, 'Slow'),\n            (6, 'StackOverflow');\n\n        create table \\`main\\`.\\`Coder\\` (\n            Id int,\n            FullName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Coder\\` values\n                (1, 'Sam'),\n                (2, 'Alex'),\n                (3, 'Drew'),\n                (4, 'Taylor'),\n                (5, 'Parker'),\n                (6, 'Austin');\n\n        create table \\`main\\`.\\`Customer\\` (\n            Id int,\n            CustomerName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Customer\\` values\n                (1, 'Pies LLC'),\n                (2, 'Buns, Inc.'),\n                (3, 'Hats-R-Us'),\n                (4, 'Silence'),\n                (5, 'Egypt'),\n                (6, 'Affordability');\n\n        create table \\`main\\`.\\`CategoryCombination\\` (\n            Id int,\n            StackOverflow bit,\n            Slow bit,\n            OffByOne bit,\n            SecurityBreach bit,\n            DataLoss bit,\n            Crashed bit\n        );\n\n        insert into \\`main\\`.\\`CategoryCombination\\` values ${categoryCombinationsRows};\n\n        create table \\`main\\`.\\`Bug\\` (\n            Id int,\n            WorkflowId int,\n            CustomerId int,\n            ReportedDate date,\n            ResolvedDate date,\n            AssignedDate date,\n            CategoryCombinationId int,\n            AssignedCoderId int,\n            ResolvedCoderId int\n        );\n\n        insert into \\`main\\`.\\`Bug\\` values ${bugRows};\n    `;\n\n    db.run(initSql);\n}\n"]},"metadata":{},"sourceType":"module"}