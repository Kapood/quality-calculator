{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/RecoverySummary.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FlowerBITable, useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Bug, Workflow } from \"../demoSchema\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function RecoverySummary(_ref) {\n  _s();\n\n  let {\n    pageFilters,\n    fixedByCustomer,\n    title,\n    fetch\n  } = _ref;\n  const data = useQuery(fetch, {\n    select: {\n      state: Workflow.WorkflowState,\n      bugCount: Bug.Id.count(),\n      resolvedBugCount: Bug.Id.count([Workflow.Resolved.equalTo(true)])\n    },\n    filters: [Workflow.FixedByCustomer.equalTo(fixedByCustomer), ...pageFilters.getFilters(\"\")],\n    totals: true\n  });\n  return /*#__PURE__*/_jsxDEV(FlowerBIChartBox, {\n    title: title,\n    state: data.state,\n    children: /*#__PURE__*/_jsxDEV(FlowerBITable, {\n      data: data,\n      columns: {\n        QualityMetrics: d => {\n          var _d$values$state;\n\n          return (_d$values$state = d.values.state) !== null && _d$values$state !== void 0 ? _d$values$state : \"Total\";\n        },\n        Count: d => [`${d.values.bugCount}`, \"right\"],\n        \"% of Count\": d => [`${d.percentage(\"resolvedBugCount\")}%`, \"right\"]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n\n_s(RecoverySummary, \"s5pXKY/D2uxDKB8G+Zz1KjP19Ng=\", false, function () {\n  return [useQuery];\n});\n\n_c = RecoverySummary;\n\nvar _c;\n\n$RefreshReg$(_c, \"RecoverySummary\");","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/RecoverySummary.tsx"],"names":["React","FlowerBITable","useQuery","FlowerBIChartBox","Bug","Workflow","RecoverySummary","pageFilters","fixedByCustomer","title","fetch","data","select","state","WorkflowState","bugCount","Id","count","resolvedBugCount","Resolved","equalTo","filters","FixedByCustomer","getFilters","totals","QualityMetrics","d","values","Count","percentage"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,gBAAxC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,GAAT,EAAcC,QAAd,QAA8B,eAA9B;;AAQA,OAAO,SAASC,eAAT,OAA+F;AAAA;;AAAA,MAAtE;AAAEC,IAAAA,WAAF;AAAeC,IAAAA,eAAf;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA;AAAvC,GAAsE;AAElG,QAAMC,IAAI,GAAGT,QAAQ,CAACQ,KAAD,EAAQ;AACzBE,IAAAA,MAAM,EAAE;AACJC,MAAAA,KAAK,EAAER,QAAQ,CAACS,aADZ;AAEJC,MAAAA,QAAQ,EAAEX,GAAG,CAACY,EAAJ,CAAOC,KAAP,EAFN;AAGJC,MAAAA,gBAAgB,EAAEd,GAAG,CAACY,EAAJ,CAAOC,KAAP,CAAa,CAC3BZ,QAAQ,CAACc,QAAT,CAAkBC,OAAlB,CAA0B,IAA1B,CAD2B,CAAb;AAHd,KADiB;AAQzBC,IAAAA,OAAO,EAAE,CACLhB,QAAQ,CAACiB,eAAT,CAAyBF,OAAzB,CAAiCZ,eAAjC,CADK,EAEL,GAAGD,WAAW,CAACgB,UAAZ,CAAuB,EAAvB,CAFE,CARgB;AAYzBC,IAAAA,MAAM,EAAE;AAZiB,GAAR,CAArB;AAeA,sBACI,QAAC,gBAAD;AAAkB,IAAA,KAAK,EAAEf,KAAzB;AAAgC,IAAA,KAAK,EAAEE,IAAI,CAACE,KAA5C;AAAA,2BACI,QAAC,aAAD;AACI,MAAA,IAAI,EAAEF,IADV;AAEI,MAAA,OAAO,EAAE;AACLc,QAAAA,cAAc,EAAGC,CAAD;AAAA;;AAAA,oCAAOA,CAAC,CAACC,MAAF,CAASd,KAAhB,6DAAyB,OAAzB;AAAA,SADX;AAELe,QAAAA,KAAK,EAAGF,CAAD,IAAO,CAAE,GAAEA,CAAC,CAACC,MAAF,CAASZ,QAAS,EAAtB,EAAyB,OAAzB,CAFT;AAGL,sBAAeW,CAAD,IAAO,CAAE,GAAEA,CAAC,CAACG,UAAF,CAAa,kBAAb,CAAiC,GAArC,EAAyC,OAAzC;AAHhB;AAFb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAYH;;GA7BevB,e;UAECJ,Q;;;KAFDI,e","sourcesContent":["import React from \"react\";\nimport { FlowerBITable, useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Bug, Workflow } from \"../demoSchema\";\nimport { VisualProps } from \"./VisualProps\";\n\nexport interface RecoverySummaryProps extends VisualProps {\n    fixedByCustomer: boolean;\n    title: string;\n}\n\nexport function RecoverySummary({ pageFilters, fixedByCustomer, title, fetch }: RecoverySummaryProps) {\n\n    const data = useQuery(fetch, {\n        select: {\n            state: Workflow.WorkflowState,\n            bugCount: Bug.Id.count(),\n            resolvedBugCount: Bug.Id.count([\n                Workflow.Resolved.equalTo(true)\n            ])\n        },\n        filters: [\n            Workflow.FixedByCustomer.equalTo(fixedByCustomer),\n            ...pageFilters.getFilters(\"\"),\n        ],\n        totals: true\n    });\n\n    return (\n        <FlowerBIChartBox title={title} state={data.state}>\n            <FlowerBITable\n                data={data}\n                columns={{\n                    QualityMetrics: (d) => d.values.state ?? \"Total\",\n                    Count: (d) => [`${d.values.bugCount}`, \"right\"],\n                    \"% of Count\": (d) => [`${d.percentage(\"resolvedBugCount\")}%`, \"right\"],\n                }} \n            />\n        </FlowerBIChartBox>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}