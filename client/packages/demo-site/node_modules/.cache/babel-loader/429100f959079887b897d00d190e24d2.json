{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/ResolvedPerCustomer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Customer, Bug, Workflow } from \"../demoSchema\";\nimport { dataColours } from \"./dataColours\";\nimport { Pie } from \"react-chartjs-2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ResolvedPerCustomer(_ref) {\n  _s();\n\n  let {\n    pageFilters,\n    fetch\n  } = _ref;\n  const id = \"ResolvedPerCustomer\";\n  const query = {\n    select: {\n      customer: Customer.CustomerName,\n      bugCount: Bug.Id.count()\n    },\n    filters: [Workflow.Resolved.equalTo(true), ...pageFilters.getFilters(id)]\n  };\n  const ref = useRef(null);\n  const result = useQuery(fetch, query);\n  return /*#__PURE__*/_jsxDEV(FlowerBIChartBox, {\n    id: id,\n    title: \"Included Projects\",\n    state: result.state,\n    children: /*#__PURE__*/_jsxDEV(Pie, {\n      ref: ref,\n      options: {\n        onClick(evt, elements, chart) {\n          console.log(\"clicked\", {\n            evt,\n            elements,\n            chart\n          });\n\n          if (elements[0]) {\n            const clicked = result.records[elements[0].index].customer;\n            pageFilters.setInteraction(id, [Customer.CustomerName.equalTo(clicked)]);\n          }\n        }\n\n      },\n      data: {\n        labels: result.records.map(x => x.customer),\n        datasets: [{\n          label: \"Count\",\n          backgroundColor: dataColours,\n          data: result.records.map(x => x.bugCount)\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ResolvedPerCustomer, \"uNp4nLEQY/GsICNxN8EA73yBRj8=\", false, function () {\n  return [useQuery];\n});\n\n_c = ResolvedPerCustomer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResolvedPerCustomer\");","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/ResolvedPerCustomer.tsx"],"names":["React","useRef","useQuery","FlowerBIChartBox","Customer","Bug","Workflow","dataColours","Pie","ResolvedPerCustomer","pageFilters","fetch","id","query","select","customer","CustomerName","bugCount","Id","count","filters","Resolved","equalTo","getFilters","ref","result","state","onClick","evt","elements","chart","console","log","clicked","records","index","setInteraction","labels","map","x","datasets","label","backgroundColor","data"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,QAAxB,QAAwC,eAAxC;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,GAAT,QAAoB,iBAApB;;AAIA,OAAO,SAASC,mBAAT,OAAkE;AAAA;;AAAA,MAArC;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,GAAqC;AAErE,QAAMC,EAAE,GAAG,qBAAX;AAEA,QAAMC,KAAK,GAAG;AACVC,IAAAA,MAAM,EAAE;AACJC,MAAAA,QAAQ,EAAEX,QAAQ,CAACY,YADf;AAEJC,MAAAA,QAAQ,EAAEZ,GAAG,CAACa,EAAJ,CAAOC,KAAP;AAFN,KADE;AAKVC,IAAAA,OAAO,EAAE,CACLd,QAAQ,CAACe,QAAT,CAAkBC,OAAlB,CAA0B,IAA1B,CADK,EAEL,GAAGZ,WAAW,CAACa,UAAZ,CAAuBX,EAAvB,CAFE;AALC,GAAd;AAWA,QAAMY,GAAG,GAAGvB,MAAM,CAAiB,IAAjB,CAAlB;AACA,QAAMwB,MAAM,GAAGvB,QAAQ,CAACS,KAAD,EAAQE,KAAR,CAAvB;AAEA,sBACI,QAAC,gBAAD;AAAkB,IAAA,EAAE,EAAED,EAAtB;AAA0B,IAAA,KAAK,EAAC,mBAAhC;AAAoD,IAAA,KAAK,EAAEa,MAAM,CAACC,KAAlE;AAAA,2BACI,QAAC,GAAD;AACI,MAAA,GAAG,EAAEF,GADT;AAEI,MAAA,OAAO,EAAE;AACLG,QAAAA,OAAO,CAACC,GAAD,EAAMC,QAAN,EAAgBC,KAAhB,EAAuB;AAC1BC,UAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuB;AAAEJ,YAAAA,GAAF;AAAOC,YAAAA,QAAP;AAAiBC,YAAAA;AAAjB,WAAvB;;AACA,cAAID,QAAQ,CAAC,CAAD,CAAZ,EAAiB;AACb,kBAAMI,OAAO,GAAGR,MAAM,CAACS,OAAP,CAAeL,QAAQ,CAAC,CAAD,CAAR,CAAYM,KAA3B,EAAkCpB,QAAlD;AACAL,YAAAA,WAAW,CAAC0B,cAAZ,CAA2BxB,EAA3B,EAA+B,CAC3BR,QAAQ,CAACY,YAAT,CAAsBM,OAAtB,CAA8BW,OAA9B,CAD2B,CAA/B;AAGH;AACJ;;AATI,OAFb;AAaI,MAAA,IAAI,EAAE;AACFI,QAAAA,MAAM,EAAEZ,MAAM,CAACS,OAAP,CAAeI,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACxB,QAA1B,CADN;AAEFyB,QAAAA,QAAQ,EAAE,CAAC;AACPC,UAAAA,KAAK,EAAE,OADA;AAEPC,UAAAA,eAAe,EAAEnC,WAFV;AAGPoC,UAAAA,IAAI,EAAElB,MAAM,CAACS,OAAP,CAAeI,GAAf,CAAmBC,CAAC,IAAIA,CAAC,CAACtB,QAA1B;AAHC,SAAD;AAFR;AAbV;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA0BH;;GA5CeR,mB;UAgBGP,Q;;;KAhBHO,mB","sourcesContent":["import React, { useRef } from \"react\";\nimport { useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Customer, Bug, Workflow } from \"../demoSchema\";\nimport { dataColours } from \"./dataColours\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { VisualProps } from \"./VisualProps\";\n\nexport function ResolvedPerCustomer({ pageFilters, fetch }: VisualProps) {\n\n    const id = \"ResolvedPerCustomer\";\n\n    const query = {\n        select: {\n            customer: Customer.CustomerName,\n            bugCount: Bug.Id.count()\n        },\n        filters: [\n            Workflow.Resolved.equalTo(true),\n            ...pageFilters.getFilters(id)\n        ],\n    };\n\n    const ref = useRef<ChartJS<\"pie\">>(null);\n    const result = useQuery(fetch, query);\n    \n    return (\n        <FlowerBIChartBox id={id} title=\"Included Projects\" state={result.state}>\n            <Pie\n                ref={ref}\n                options={{\n                    onClick(evt, elements, chart) {\n                        console.log(\"clicked\", { evt, elements, chart });\n                        if (elements[0]) {\n                            const clicked = result.records[elements[0].index].customer;\n                            pageFilters.setInteraction(id, [\n                                Customer.CustomerName.equalTo(clicked)\n                            ]);\n                        }\n                    }\n                }}\n                data={{\n                    labels: result.records.map(x => x.customer),\n                    datasets: [{\n                        label: \"Count\",\n                        backgroundColor: dataColours,\n                        data: result.records.map(x => x.bugCount)\n                    }]\n                }}\n            />\n        </FlowerBIChartBox>        \n    );\n}\n"]},"metadata":{},"sourceType":"module"}