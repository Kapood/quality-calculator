{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueryValuesTotal = exports.QueryValuesRow = void 0;\n\nvar QueryValuesRow =\n/** @class */\nfunction () {\n  function QueryValuesRow(values, totals) {\n    this.values = values;\n    this.totals = totals;\n  }\n\n  QueryValuesRow.prototype.percentage = function (key) {\n    var _a;\n\n    if (!this.totals) return 0;\n    var rawValue = this.values[key];\n    var total = (_a = this.totals[key]) !== null && _a !== void 0 ? _a : 0;\n    var percent = total === 0 ? 0 : rawValue / total * 100;\n    return Math.round(percent * 100) / 100;\n  };\n\n  return QueryValuesRow;\n}();\n\nexports.QueryValuesRow = QueryValuesRow;\n\nvar QueryValuesTotal =\n/** @class */\nfunction () {\n  function QueryValuesTotal(totals) {\n    this.values = totals;\n  }\n\n  QueryValuesTotal.prototype.percentage = function () {\n    return 100;\n  };\n\n  return QueryValuesTotal;\n}();\n\nexports.QueryValuesTotal = QueryValuesTotal;","map":{"version":3,"mappings":";;;;;;;AAwBA;AAAA;AAAA;AACI,0BAA4BA,MAA5B,EAA+EC,MAA/E,EAAkJ;AAAtH;AAAmD;AAAuE;;AAEtJC,kDAA4CC,GAA5C,EAAkD;;;AAC9C,QAAI,CAAC,KAAKF,MAAV,EAAkB,OAAO,CAAP;AAElB,QAAMG,QAAQ,GAAG,KAAKJ,MAAL,CAAYG,GAAZ,CAAjB;AACA,QAAME,KAAK,GAAG,WAAKJ,MAAL,CAAYE,GAAZ,OAAgB,IAAhB,IAAgBG,aAAhB,GAAgBA,EAAhB,GAAoB,CAAlC;AACA,QAAMC,OAAO,GAAGF,KAAK,KAAK,CAAV,GAAc,CAAd,GAAmBD,QAAQ,GAAGC,KAAZ,GAAqB,GAAvD;AACA,WAAOG,IAAI,CAACC,KAAL,CAAWF,OAAO,GAAG,GAArB,IAA4B,GAAnC;AACH,GAPD;;AAQJ;AAAC,CAXD;;AAAaG;;AAab;AAAA;AAAA;AAGI,4BAAYT,MAAZ,EAAiE;AAC7D,SAAKD,MAAL,GAAcC,MAAd;AACH;;AAEDU;AACI,WAAO,GAAP;AACH,GAFD;;AAGJ;AAAC,CAVD;;AAAaD","names":["values","totals","QueryValuesRow","key","rawValue","total","_a","percent","Math","round","exports","QueryValuesTotal"],"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/flowerbi/src/QueryValues.ts"],"sourcesContent":["import {\n    QuerySelect,\n    ExpandedQueryRecord,\n    AggregateValuesOnly,\n    AggregatePropsOnly,\n    ExpandedQueryRecordWithOptionalColumns,\n    QueryCalculations,\n    CalculationValues,\n} from \"./queryModel\";\n\n/**\n * An abstract interface representing either a row from a dataset or\n * the {@link ExpandedQueryResult.totals} row, so that generic code can\n * format either of them in a consistent way.\n */\nexport interface QueryValues<S extends QuerySelect, C extends QueryCalculations<S>> {\n    /**\n     * The plain values of columns, which may be `undefined` if this\n     * refers to the {@link ExpandedQueryResult.totals} record.\n     */\n    values: ExpandedQueryRecordWithOptionalColumns<S, C>;\n    percentage<K extends AggregatePropsOnly<S>>(key: K): number;\n}\n\nexport class QueryValuesRow<S extends QuerySelect, C extends QueryCalculations<S>> implements QueryValues<S, C> {\n    constructor(public readonly values: ExpandedQueryRecord<S, C>, public readonly totals: (AggregateValuesOnly<S> & CalculationValues<C>) | undefined) {}\n\n    percentage<K extends AggregatePropsOnly<S>>(key: K) {\n        if (!this.totals) return 0;\n\n        const rawValue = this.values[key];\n        const total = this.totals[key] ?? 0;\n        const percent = total === 0 ? 0 : (rawValue / total) * 100;\n        return Math.round(percent * 100) / 100;\n    }\n}\n\nexport class QueryValuesTotal<S extends QuerySelect, C extends QueryCalculations<S>> implements QueryValues<S, C> {\n    public readonly values: ExpandedQueryRecordWithOptionalColumns<S, C>;\n\n    constructor(totals: AggregateValuesOnly<S> & CalculationValues<C>) {\n        this.values = totals as ExpandedQueryRecordWithOptionalColumns<S, C>;\n    }\n\n    percentage() {\n        return 100;\n    }\n}\n"]},"metadata":{},"sourceType":"script"}