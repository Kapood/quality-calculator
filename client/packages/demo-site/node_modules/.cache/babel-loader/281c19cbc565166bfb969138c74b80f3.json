{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FlowerBITable = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar flowerbi_1 = require(\"flowerbi\");\n\nfunction renderCell(key, def) {\n  var value = typeof def === \"string\" ? def : def[0];\n  var align = typeof def === \"string\" ? \"left\" : def[1];\n  return react_1.default.createElement(\"td\", {\n    key: key,\n    className: align\n  }, value);\n}\n\nfunction FlowerBITable(_a) {\n  var data = _a.data,\n      columns = _a.columns;\n  return react_1.default.createElement(\"table\", null, react_1.default.createElement(\"thead\", null, react_1.default.createElement(\"tr\", null, Object.keys(columns).map(function (column) {\n    return react_1.default.createElement(\"th\", {\n      key: column\n    }, column);\n  }))), react_1.default.createElement(\"tbody\", null, data.records.map(function (record, i) {\n    var _a;\n\n    return react_1.default.createElement(\"tr\", {\n      key: (_a = JSON.stringify(record.selected)) !== null && _a !== void 0 ? _a : i\n    }, Object.keys(columns).map(function (column) {\n      return renderCell(column, columns[column](new flowerbi_1.QueryValuesRow(record, data.totals)));\n    }));\n  })), data.totals && react_1.default.createElement(\"tfoot\", null, react_1.default.createElement(\"tr\", null, Object.keys(columns).map(function (column) {\n    return renderCell(column, columns[column](new flowerbi_1.QueryValuesTotal(data.totals)));\n  }))));\n}\n\nexports.FlowerBITable = FlowerBITable;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AAIA,SAASA,UAAT,CAAoBC,GAApB,EAAiCC,GAAjC,EAAsD;AAClD,MAAMC,KAAK,GAAG,OAAOD,GAAP,KAAe,QAAf,GAA0BA,GAA1B,GAAgCA,GAAG,CAAC,CAAD,CAAjD;AACA,MAAME,KAAK,GAAG,OAAOF,GAAP,KAAe,QAAf,GAA0B,MAA1B,GAAmCA,GAAG,CAAC,CAAD,CAApD;AAEA,SACIG;AAAIJ,OAAG,EAAEA,GAAT;AAAcK,aAAS,EAAEF;AAAzB,KACKD,KADL,CADJ;AAKH;;AASD,SAAgBI,aAAhB,CAAqFC,EAArF,EAAgI;MAAzCC,IAAI;MAAEC,OAAO;AAChG,SACIL,6CACIA,6CACIA,0CACKM,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,GAArB,CAAyB,UAACC,MAAD,EAAO;AAAK,WAClCT;AAAIJ,SAAG,EAAEa;AAAT,OAAkBA,MAAlB,CADkC;AAErC,GAFA,CADL,CADJ,CADJ,EAQIT,6CACKI,IAAI,CAACM,OAAL,CAAaF,GAAb,CAAiB,UAACG,MAAD,EAASC,CAAT,EAAU;;;AAAK,WAC7BZ;AAAIJ,SAAG,EAAE,UAAI,CAACiB,SAAL,CAAeF,MAAM,CAACG,QAAtB,OAA+B,IAA/B,IAA+BX,aAA/B,GAA+BA,EAA/B,GAAmCS;AAA5C,OACKN,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,GAArB,CAAyB,UAACC,MAAD,EAAO;AAAK,uBAAU,CAACA,MAAD,EAASJ,OAAO,CAACI,MAAD,CAAP,CAAgB,IAAIM,yBAAJ,CAAyBJ,MAAzB,EAAiCP,IAAI,CAACY,MAAtC,CAAhB,CAAT,CAAV;AAAkF,KAAvH,CADL,CAD6B;AAIhC,GAJA,CADL,CARJ,EAeKZ,IAAI,CAACY,MAAL,IACGhB,6CACIA,0CAAKM,MAAM,CAACC,IAAP,CAAYF,OAAZ,EAAqBG,GAArB,CAAyB,UAACC,MAAD,EAAO;AAAK,qBAAU,CAACA,MAAD,EAASJ,OAAO,CAACI,MAAD,CAAP,CAAgB,IAAIM,2BAAJ,CAA2BX,IAAI,CAACY,MAAhC,CAAhB,CAAT,CAAV;AAA6E,GAAlH,CAAL,CADJ,CAhBR,CADJ;AAuBH;;AAxBDC","names":["renderCell","key","def","value","align","react_1","className","FlowerBITable","_a","data","columns","Object","keys","map","column","records","record","i","stringify","selected","flowerbi_1","totals","exports"],"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/flowerbi-react/src/FlowerBITable.tsx"],"sourcesContent":["import React from \"react\";\nimport { QueryValues, QueryValuesRow, QueryValuesTotal, ExpandedQueryResult, QuerySelect, QueryCalculations } from \"flowerbi\";\n\nexport type ColumnDefinition = string | [string, \"left\" | \"right\"];\n\nfunction renderCell(key: string, def: ColumnDefinition) {\n    const value = typeof def === \"string\" ? def : def[0];\n    const align = typeof def === \"string\" ? \"left\" : def[1];\n\n    return (\n        <td key={key} className={align}>\n            {value}\n        </td>\n    );\n}\n\nexport type FlowerBITableProps<S extends QuerySelect, C extends QueryCalculations<S>> = {\n    data: ExpandedQueryResult<S, C>;\n    columns: {\n        [label: string]: (record: QueryValues<S, C>) => ColumnDefinition;\n    };\n};\n\nexport function FlowerBITable<S extends QuerySelect, C extends QueryCalculations<S>>({ data, columns }: FlowerBITableProps<S, C>) {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    {Object.keys(columns).map((column) => (\n                        <th key={column}>{column}</th>\n                    ))}\n                </tr>\n            </thead>\n            <tbody>\n                {data.records.map((record, i) => (\n                    <tr key={JSON.stringify(record.selected) ?? i}>\n                        {Object.keys(columns).map((column) => renderCell(column, columns[column](new QueryValuesRow<S, C>(record, data.totals))))}\n                    </tr>\n                ))}\n            </tbody>\n            {data.totals && (\n                <tfoot>\n                    <tr>{Object.keys(columns).map((column) => renderCell(column, columns[column](new QueryValuesTotal<S, C>(data.totals!))))}</tr>\n                </tfoot>\n            )}\n        </table>\n    );\n}\n"]},"metadata":{},"sourceType":"script"}