{"ast":null,"code":"import _toConsumableArray from\"/Users/alex/Documents/Build/test/flowerbi/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useRef}from\"react\";import{useQuery}from\"flowerbi-react\";import{FlowerBIChartBox}from\"flowerbi-react-utils\";import{Customer,Bug,Workflow}from\"../demoSchema\";import{dataColours}from\"./dataColours\";import{Pie}from\"react-chartjs-2\";import{jsx as _jsx}from\"react/jsx-runtime\";export function ResolvedPerCustomer(_ref){var pageFilters=_ref.pageFilters,fetch=_ref.fetch;var id=\"ResolvedPerCustomer\";var query={select:{customer:Customer.CustomerName,bugCount:Bug.Id.count()},filters:[Workflow.Resolved.equalTo(true)].concat(_toConsumableArray(pageFilters.getFilters(id)))};var ref=useRef(null);var result=useQuery(fetch,query);return/*#__PURE__*/_jsx(FlowerBIChartBox,{id:id,title:\"Resolved Per Customer\",state:result.state,children:/*#__PURE__*/_jsx(Pie,{ref:ref,options:{onClick:function onClick(evt,elements,chart){console.log(\"clicked\",{evt:evt,elements:elements,chart:chart});if(elements[0]){var clicked=result.records[elements[0].index].customer;pageFilters.setInteraction(id,[Customer.CustomerName.equalTo(clicked)]);}}},data:{labels:result.records.map(function(x){return x.customer;}),datasets:[{label:\"Count\",backgroundColor:dataColours,data:result.records.map(function(x){return x.bugCount;})}]}})});}","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/ResolvedPerCustomer.tsx"],"names":["React","useRef","useQuery","FlowerBIChartBox","Customer","Bug","Workflow","dataColours","Pie","ResolvedPerCustomer","pageFilters","fetch","id","query","select","customer","CustomerName","bugCount","Id","count","filters","Resolved","equalTo","getFilters","ref","result","state","onClick","evt","elements","chart","console","log","clicked","records","index","setInteraction","labels","map","x","datasets","label","backgroundColor","data"],"mappings":"8IAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,KAA8B,OAA9B,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,gBAAT,KAAiC,sBAAjC,CACA,OAASC,QAAT,CAAmBC,GAAnB,CAAwBC,QAAxB,KAAwC,eAAxC,CACA,OAASC,WAAT,KAA4B,eAA5B,CACA,OAASC,GAAT,KAAoB,iBAApB,C,2CAIA,MAAO,SAASC,CAAAA,mBAAT,MAAkE,IAAnCC,CAAAA,WAAmC,MAAnCA,WAAmC,CAAtBC,KAAsB,MAAtBA,KAAsB,CAErE,GAAMC,CAAAA,EAAE,CAAG,qBAAX,CAEA,GAAMC,CAAAA,KAAK,CAAG,CACVC,MAAM,CAAE,CACJC,QAAQ,CAAEX,QAAQ,CAACY,YADf,CAEJC,QAAQ,CAAEZ,GAAG,CAACa,EAAJ,CAAOC,KAAP,EAFN,CADE,CAKVC,OAAO,EACHd,QAAQ,CAACe,QAAT,CAAkBC,OAAlB,CAA0B,IAA1B,CADG,4BAEAZ,WAAW,CAACa,UAAZ,CAAuBX,EAAvB,CAFA,EALG,CAAd,CAWA,GAAMY,CAAAA,GAAG,CAAGvB,MAAM,CAAiB,IAAjB,CAAlB,CACA,GAAMwB,CAAAA,MAAM,CAAGvB,QAAQ,CAACS,KAAD,CAAQE,KAAR,CAAvB,CAEA,mBACI,KAAC,gBAAD,EAAkB,EAAE,CAAED,EAAtB,CAA0B,KAAK,CAAC,uBAAhC,CAAwD,KAAK,CAAEa,MAAM,CAACC,KAAtE,uBACI,KAAC,GAAD,EACI,GAAG,CAAEF,GADT,CAEI,OAAO,CAAE,CACLG,OADK,kBACGC,GADH,CACQC,QADR,CACkBC,KADlB,CACyB,CAC1BC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuB,CAAEJ,GAAG,CAAHA,GAAF,CAAOC,QAAQ,CAARA,QAAP,CAAiBC,KAAK,CAALA,KAAjB,CAAvB,EACA,GAAID,QAAQ,CAAC,CAAD,CAAZ,CAAiB,CACb,GAAMI,CAAAA,OAAO,CAAGR,MAAM,CAACS,OAAP,CAAeL,QAAQ,CAAC,CAAD,CAAR,CAAYM,KAA3B,EAAkCpB,QAAlD,CACAL,WAAW,CAAC0B,cAAZ,CAA2BxB,EAA3B,CAA+B,CAC3BR,QAAQ,CAACY,YAAT,CAAsBM,OAAtB,CAA8BW,OAA9B,CAD2B,CAA/B,EAGH,CACJ,CATI,CAFb,CAaI,IAAI,CAAE,CACFI,MAAM,CAAEZ,MAAM,CAACS,OAAP,CAAeI,GAAf,CAAmB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACxB,QAAN,EAApB,CADN,CAEFyB,QAAQ,CAAE,CAAC,CACPC,KAAK,CAAE,OADA,CAEPC,eAAe,CAAEnC,WAFV,CAGPoC,IAAI,CAAElB,MAAM,CAACS,OAAP,CAAeI,GAAf,CAAmB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACtB,QAAN,EAApB,CAHC,CAAD,CAFR,CAbV,EADJ,EADJ,CA0BH","sourcesContent":["import React, { useRef } from \"react\";\nimport { useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Customer, Bug, Workflow } from \"../demoSchema\";\nimport { dataColours } from \"./dataColours\";\nimport { Pie } from \"react-chartjs-2\";\nimport { Chart as ChartJS } from \"chart.js\";\nimport { VisualProps } from \"./VisualProps\";\n\nexport function ResolvedPerCustomer({ pageFilters, fetch }: VisualProps) {\n\n    const id = \"ResolvedPerCustomer\";\n\n    const query = {\n        select: {\n            customer: Customer.CustomerName,\n            bugCount: Bug.Id.count()\n        },\n        filters: [\n            Workflow.Resolved.equalTo(true),\n            ...pageFilters.getFilters(id)\n        ],\n    };\n\n    const ref = useRef<ChartJS<\"pie\">>(null);\n    const result = useQuery(fetch, query);\n    \n    return (\n        <FlowerBIChartBox id={id} title=\"Resolved Per Customer\" state={result.state}>\n            <Pie\n                ref={ref}\n                options={{\n                    onClick(evt, elements, chart) {\n                        console.log(\"clicked\", { evt, elements, chart });\n                        if (elements[0]) {\n                            const clicked = result.records[elements[0].index].customer;\n                            pageFilters.setInteraction(id, [\n                                Customer.CustomerName.equalTo(clicked)\n                            ]);\n                        }\n                    }\n                }}\n                data={{\n                    labels: result.records.map(x => x.customer),\n                    datasets: [{\n                        label: \"Count\",\n                        backgroundColor: dataColours,\n                        data: result.records.map(x => x.bugCount)\n                    }]\n                }}\n            />\n        </FlowerBIChartBox>        \n    );\n}\n"]},"metadata":{},"sourceType":"module"}