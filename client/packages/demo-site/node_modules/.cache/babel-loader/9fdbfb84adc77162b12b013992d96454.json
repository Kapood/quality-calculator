{"ast":null,"code":"var _jsxFileName = \"/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/BugsGrid.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { FlowerBITable, useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Bug, CoderAssigned, Customer, Workflow } from \"../demoSchema\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function BugsGrid(_ref) {\n  _s();\n\n  let {\n    fetch\n  } = _ref;\n  const data = useQuery(fetch, {\n    select: {\n      id: Bug.Id,\n      state: Workflow.WorkflowState,\n      customer: Customer.CustomerName,\n      coder: CoderAssigned.FullName\n    },\n    allowDuplicates: true,\n    comment: \"allbugs\"\n  });\n  return /*#__PURE__*/_jsxDEV(FlowerBIChartBox, {\n    title: \"All Bugs\",\n    state: data.state,\n    children: /*#__PURE__*/_jsxDEV(FlowerBITable, {\n      data: data,\n      columns: {\n        ID: d => `${d.values.id}`,\n        State: d => {\n          var _d$values$state;\n\n          return (_d$values$state = d.values.state) !== null && _d$values$state !== void 0 ? _d$values$state : \"\";\n        },\n        Customer: d => {\n          var _d$values$customer;\n\n          return (_d$values$customer = d.values.customer) !== null && _d$values$customer !== void 0 ? _d$values$customer : \"\";\n        },\n        Coder: d => {\n          var _d$values$coder;\n\n          return (_d$values$coder = d.values.coder) !== null && _d$values$coder !== void 0 ? _d$values$coder : \"\";\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(BugsGrid, \"s5pXKY/D2uxDKB8G+Zz1KjP19Ng=\", false, function () {\n  return [useQuery];\n});\n\n_c = BugsGrid;\n\nvar _c;\n\n$RefreshReg$(_c, \"BugsGrid\");","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/BugsGrid.tsx"],"names":["React","FlowerBITable","useQuery","FlowerBIChartBox","Bug","CoderAssigned","Customer","Workflow","BugsGrid","fetch","data","select","id","Id","state","WorkflowState","customer","CustomerName","coder","FullName","allowDuplicates","comment","ID","d","values","State","Coder"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,EAAwBC,QAAxB,QAAwC,gBAAxC;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,GAAT,EAAcC,aAAd,EAA6BC,QAA7B,EAAuCC,QAAvC,QAAuD,eAAvD;;AAKA,OAAO,SAASC,QAAT,OAA4C;AAAA;;AAAA,MAA1B;AAAEC,IAAAA;AAAF,GAA0B;AAE/C,QAAMC,IAAI,GAAGR,QAAQ,CAACO,KAAD,EAAQ;AACzBE,IAAAA,MAAM,EAAE;AACJC,MAAAA,EAAE,EAAER,GAAG,CAACS,EADJ;AAEJC,MAAAA,KAAK,EAAEP,QAAQ,CAACQ,aAFZ;AAGJC,MAAAA,QAAQ,EAAEV,QAAQ,CAACW,YAHf;AAIJC,MAAAA,KAAK,EAAEb,aAAa,CAACc;AAJjB,KADiB;AAOzBC,IAAAA,eAAe,EAAE,IAPQ;AAQzBC,IAAAA,OAAO,EAAE;AARgB,GAAR,CAArB;AAWA,sBACI,QAAC,gBAAD;AAAkB,IAAA,KAAK,EAAE,UAAzB;AAAqC,IAAA,KAAK,EAAEX,IAAI,CAACI,KAAjD;AAAA,2BACI,QAAC,aAAD;AACI,MAAA,IAAI,EAAEJ,IADV;AAEI,MAAA,OAAO,EAAE;AACLY,QAAAA,EAAE,EAAGC,CAAD,IAAQ,GAAEA,CAAC,CAACC,MAAF,CAASZ,EAAG,EADrB;AAELa,QAAAA,KAAK,EAAGF,CAAD;AAAA;;AAAA,oCAAOA,CAAC,CAACC,MAAF,CAASV,KAAhB,6DAAyB,EAAzB;AAAA,SAFF;AAGLR,QAAAA,QAAQ,EAAGiB,CAAD;AAAA;;AAAA,uCAAOA,CAAC,CAACC,MAAF,CAASR,QAAhB,mEAA4B,EAA5B;AAAA,SAHL;AAILU,QAAAA,KAAK,EAAGH,CAAD;AAAA;;AAAA,oCAAOA,CAAC,CAACC,MAAF,CAASN,KAAhB,6DAAyB,EAAzB;AAAA;AAJF;AAFb;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAaH;;GA1BeV,Q;UAECN,Q;;;KAFDM,Q","sourcesContent":["import React from \"react\";\nimport { FlowerBITable, useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Bug, CoderAssigned, Customer, Workflow } from \"../demoSchema\";\nimport { VisualProps } from \"./VisualProps\";\n\nexport interface BugsGridProps extends VisualProps { }\n\nexport function BugsGrid({ fetch }: BugsGridProps) {\n\n    const data = useQuery(fetch, {\n        select: {\n            id: Bug.Id,\n            state: Workflow.WorkflowState,\n            customer: Customer.CustomerName,\n            coder: CoderAssigned.FullName,\n        },\n        allowDuplicates: true,\n        comment: \"allbugs\"\n    });\n\n    return (\n        <FlowerBIChartBox title={\"All Bugs\"} state={data.state}>\n            <FlowerBITable\n                data={data}\n                columns={{\n                    ID: (d) => `${d.values.id}`,\n                    State: (d) => d.values.state ?? \"\",\n                    Customer: (d) => d.values.customer ?? \"\",\n                    Coder: (d) => d.values.coder ?? \"\",\n                }} \n            />\n        </FlowerBIChartBox>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}