{"ast":null,"code":"import React from\"react\";import{FlowerBITable,useQuery}from\"flowerbi-react\";import{FlowerBIChartBox}from\"flowerbi-react-utils\";import{Bug,CoderAssigned,Customer,Workflow}from\"../demoSchema\";import{jsx as _jsx}from\"react/jsx-runtime\";export function BugsGrid(_ref){var fetch=_ref.fetch;var data=useQuery(fetch,{select:{id:Bug.Id,state:Workflow.WorkflowState,customer:Customer.CustomerName,coder:CoderAssigned.FullName},allowDuplicates:true,comment:\"allbugs\"});return/*#__PURE__*/_jsx(FlowerBIChartBox,{title:\"All Bugs\",state:data.state,children:/*#__PURE__*/_jsx(FlowerBITable,{data:data,columns:{ID:function ID(d){return\"\".concat(d.values.id);},State:function State(d){var _d$values$state;return(_d$values$state=d.values.state)!==null&&_d$values$state!==void 0?_d$values$state:\"\";},Customer:function Customer(d){var _d$values$customer;return(_d$values$customer=d.values.customer)!==null&&_d$values$customer!==void 0?_d$values$customer:\"\";},Coder:function Coder(d){var _d$values$coder;return(_d$values$coder=d.values.coder)!==null&&_d$values$coder!==void 0?_d$values$coder:\"\";}}})});}","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/Reports/BugsGrid.tsx"],"names":["React","FlowerBITable","useQuery","FlowerBIChartBox","Bug","CoderAssigned","Customer","Workflow","BugsGrid","fetch","data","select","id","Id","state","WorkflowState","customer","CustomerName","coder","FullName","allowDuplicates","comment","ID","d","values","State","Coder"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,aAAT,CAAwBC,QAAxB,KAAwC,gBAAxC,CACA,OAASC,gBAAT,KAAiC,sBAAjC,CACA,OAASC,GAAT,CAAcC,aAAd,CAA6BC,QAA7B,CAAuCC,QAAvC,KAAuD,eAAvD,C,2CAKA,MAAO,SAASC,CAAAA,QAAT,MAA4C,IAAxBC,CAAAA,KAAwB,MAAxBA,KAAwB,CAE/C,GAAMC,CAAAA,IAAI,CAAGR,QAAQ,CAACO,KAAD,CAAQ,CACzBE,MAAM,CAAE,CACJC,EAAE,CAAER,GAAG,CAACS,EADJ,CAEJC,KAAK,CAAEP,QAAQ,CAACQ,aAFZ,CAGJC,QAAQ,CAAEV,QAAQ,CAACW,YAHf,CAIJC,KAAK,CAAEb,aAAa,CAACc,QAJjB,CADiB,CAOzBC,eAAe,CAAE,IAPQ,CAQzBC,OAAO,CAAE,SARgB,CAAR,CAArB,CAWA,mBACI,KAAC,gBAAD,EAAkB,KAAK,CAAE,UAAzB,CAAqC,KAAK,CAAEX,IAAI,CAACI,KAAjD,uBACI,KAAC,aAAD,EACI,IAAI,CAAEJ,IADV,CAEI,OAAO,CAAE,CACLY,EAAE,CAAE,YAACC,CAAD,kBAAUA,CAAC,CAACC,MAAF,CAASZ,EAAnB,GADC,CAELa,KAAK,CAAE,eAACF,CAAD,6CAAOA,CAAC,CAACC,MAAF,CAASV,KAAhB,mDAAyB,EAAzB,EAFF,CAGLR,QAAQ,CAAE,kBAACiB,CAAD,mDAAOA,CAAC,CAACC,MAAF,CAASR,QAAhB,yDAA4B,EAA5B,EAHL,CAILU,KAAK,CAAE,eAACH,CAAD,6CAAOA,CAAC,CAACC,MAAF,CAASN,KAAhB,mDAAyB,EAAzB,EAJF,CAFb,EADJ,EADJ,CAaH","sourcesContent":["import React from \"react\";\nimport { FlowerBITable, useQuery } from \"flowerbi-react\";\nimport { FlowerBIChartBox } from \"flowerbi-react-utils\";\nimport { Bug, CoderAssigned, Customer, Workflow } from \"../demoSchema\";\nimport { VisualProps } from \"./VisualProps\";\n\nexport interface BugsGridProps extends VisualProps { }\n\nexport function BugsGrid({ fetch }: BugsGridProps) {\n\n    const data = useQuery(fetch, {\n        select: {\n            id: Bug.Id,\n            state: Workflow.WorkflowState,\n            customer: Customer.CustomerName,\n            coder: CoderAssigned.FullName,\n        },\n        allowDuplicates: true,\n        comment: \"allbugs\"\n    });\n\n    return (\n        <FlowerBIChartBox title={\"All Bugs\"} state={data.state}>\n            <FlowerBITable\n                data={data}\n                columns={{\n                    ID: (d) => `${d.values.id}`,\n                    State: (d) => d.values.state ?? \"\",\n                    Customer: (d) => d.values.customer ?? \"\",\n                    Coder: (d) => d.values.coder ?? \"\",\n                }} \n            />\n        </FlowerBIChartBox>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}