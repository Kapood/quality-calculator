{"ast":null,"code":"import moment from \"moment\";\n\nasync function allocDb() {\n  const publicUrl = window.sitePublicUrl;\n  const SQL = await window.initSqlJs({\n    locateFile(f) {\n      return `${publicUrl}/${f}`;\n    }\n\n  });\n  const db = new SQL.Database();\n  setupDb(db);\n  return db;\n}\n\nlet db;\nexport function getDb() {\n  if (!db) {\n    db = allocDb();\n  }\n\n  return db;\n}\n\nfunction makeRandomDate() {\n  const d = new Date(2023, 0, 1);\n  d.setDate(d.getDate() + Math.floor(Math.random() * 800));\n  return d;\n}\n\nfunction formatDate(d) {\n  return moment(d).format(\"YYYY-MM-DD\");\n}\n\nfunction startOfQuarter(d) {\n  const m = Math.floor(d.getMonth() / 3) * 3;\n  return formatDate(new Date(d.getFullYear(), m, 1));\n}\n\nfunction startOfMonth(d) {\n  return formatDate(new Date(d.getFullYear(), d.getMonth(), 1));\n}\n\nfunction pick(count, base) {\n  return Math.min(count - 1, Math.floor(Math.random() * count)) + base;\n}\n\nfunction setupDb(db) {\n  const workflowStates = [\"Functionality\", \"Reliability\", \"Efficiency\", \"Usability\", \"Stability\"];\n  const sourcesOfError = [\"Test Coverage\", \"Test Success\", \"Errors\"];\n  const dates = [];\n\n  for (let n = 0; n < 50; n++) {\n    dates.push(makeRandomDate());\n  }\n\n  const dateRows = dates.map(x => `\n        ('${formatDate(x)}', ${x.getFullYear()}, '${startOfQuarter(x)}', '${startOfMonth(x)}')`).join(\",\");\n  const workflows = [];\n\n  for (const workflowState of workflowStates) {\n    for (const sourceOfError of sourcesOfError) {\n      for (const resolved of [0, 1]) {\n        for (const fixedByCustomer of [0, 1]) {\n          workflows.push(`\n                        (${workflows.length + 1}, ${resolved}, '${workflowState}', '${sourceOfError}', ${fixedByCustomer})`);\n        }\n      }\n    }\n  }\n\n  const workflowRows = workflows.join(\",\");\n  const categoryCombinations = [];\n\n  for (const a of [0, 1]) {\n    for (const b of [0, 1]) {\n      for (const c of [0, 1]) {\n        for (const d of [0, 1]) {\n          for (const e of [0, 1]) {\n            for (const f of [0, 1]) {\n              categoryCombinations.push(`\n                                (${categoryCombinations.length}, ${a}, ${b}, ${c}, ${d}, ${e}, ${f})`);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  const categoryCombinationsRows = categoryCombinations.join(\",\");\n  const bugs = [];\n\n  for (var n = 0; n < 100; n++) {\n    const workflow = pick(workflows.length, 1);\n    const customer = pick(6, 1);\n    const reported = formatDate(dates[pick(dates.length, 0)]);\n    const resolved = formatDate(dates[pick(dates.length, 0)]);\n    const assigned = formatDate(dates[pick(dates.length, 0)]);\n    const catComb = pick(categoryCombinations.length, 1);\n    const coderAssigned = pick(6, 1);\n    const coderResolved = pick(6, 1);\n    bugs.push(`\n            (${n + 1}, ${workflow}, ${customer}, '${reported}', '${resolved}', '${assigned}', ${catComb}, ${coderAssigned}, ${coderResolved})`);\n  }\n\n  const bugRows = bugs.join(\",\");\n  const initSql = `\n        create table \\`main\\`.\\`Date\\` (\n            Id date,\n            CalendarYearNumber smallint,\n            FirstDayOfQuarter date,\n            FirstDayOfMonth date\n        );\n\n        insert into \\`main\\`.\\`Date\\` values ${dateRows};\n\n        create table \\`main\\`.\\`Workflow\\` (\n            Id int,\n            Resolved bit,\n            WorkflowState varchar(30),\n            SourceOfError varchar(30),\n            FixedByCustomer bit\n        );\n\n        insert into \\`main\\`.\\`Workflow\\` values ${workflowRows};\n\n        create table \\`main\\`.\\`Category\\` (\n            Id int,\n            Label varchar(30)\n        );\n\n        insert into \\`main\\`.\\`Category\\` values\n            (1, 'Crashed'),\n            (2, 'Data Loss'),\n            (3, 'Security Breach'),\n            (4, 'Off By One'),\n            (5, 'Slow'),\n            (6, 'StackOverflow');\n\n        create table \\`main\\`.\\`Coder\\` (\n            Id int,\n            FullName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Coder\\` values\n                (1, 'Sam'),\n                (2, 'Alex'),\n                (3, 'Drew'),\n                (4, 'Taylor'),\n                (5, 'Parker'),\n                (6, 'Austin');\n\n        create table \\`main\\`.\\`Customer\\` (\n            Id int,\n            CustomerName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Customer\\` values\n                (1, 'Quantum LLC'),\n                (2, 'Buns, Inc.'),\n                (3, 'Hats-R-Us'),\n                (4, 'Silence'),\n                (5, 'Egypt'),\n                (6, 'Affordability');\n\n        create table \\`main\\`.\\`CategoryCombination\\` (\n            Id int,\n            StackOverflow bit,\n            Slow bit,\n            OffByOne bit,\n            SecurityBreach bit,\n            DataLoss bit,\n            Crashed bit\n        );\n\n        insert into \\`main\\`.\\`CategoryCombination\\` values ${categoryCombinationsRows};\n\n        create table \\`main\\`.\\`Bug\\` (\n            Id int,\n            WorkflowId int,\n            CustomerId int,\n            ReportedDate date,\n            ResolvedDate date,\n            AssignedDate date,\n            CategoryCombinationId int,\n            AssignedCoderId int,\n            ResolvedCoderId int\n        );\n\n        insert into \\`main\\`.\\`Bug\\` values ${bugRows};\n    `;\n  db.run(initSql);\n}","map":{"version":3,"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/demo-site/src/database.ts"],"names":["moment","allocDb","publicUrl","window","sitePublicUrl","SQL","initSqlJs","locateFile","f","db","Database","setupDb","getDb","makeRandomDate","d","Date","setDate","getDate","Math","floor","random","formatDate","format","startOfQuarter","m","getMonth","getFullYear","startOfMonth","pick","count","base","min","workflowStates","sourcesOfError","dates","n","push","dateRows","map","x","join","workflows","workflowState","sourceOfError","resolved","fixedByCustomer","length","workflowRows","categoryCombinations","a","b","c","e","categoryCombinationsRows","bugs","workflow","customer","reported","assigned","catComb","coderAssigned","coderResolved","bugRows","initSql","run"],"mappings":"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AAC,CAAD,EAAI,CAAJ,CAA1B;AACA,UAAMiC,aAAa,GAAGjC,IAAI,CAAC,CAAD,EAAI,CAAJ,CAA1B;AAEA0B,IAAAA,IAAI,CAAClB,IAAL,CAAW;AACnB,eAAeD,CAAC,GAAG,CAAE,KAAIoB,QAAS,KAAIC,QAAS,MAAKC,QAAS,OAAMb,QAAS,OAAMc,QAAS,MAAKC,OAAQ,KAAIC,aAAc,KAAIC,aAAc,GADpI;AAEH;;AAED,QAAMC,OAAO,GAAGR,IAAI,CAACd,IAAL,CAAU,GAAV,CAAhB;AAEA,QAAMuB,OAAO,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C1B,QAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmDU,YAAa;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8DM,wBAAyB;AACvF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8CS,OAAQ;AACtD,KApFI;AAsFArD,EAAAA,EAAE,CAACuD,GAAH,CAAOD,OAAP;AACH","sourcesContent":["import moment from \"moment\";\n\nasync function allocDb() {\n    const publicUrl = (window as any).sitePublicUrl;\n\n    const SQL = await window.initSqlJs({\n        locateFile(f: string) {\n            return `${publicUrl}/${f}`;\n        }\n    });\n\n    const db = new SQL.Database();\n    setupDb(db);\n    return db;\n}\n\nlet db: ReturnType<typeof allocDb> | undefined;\n\ntype Await<T> = T extends {\n    then(onfulfilled?: (value: infer U) => unknown): unknown;\n} ? U : T;\n\nexport type Database = NonNullable<Await<typeof db>>;\n\nexport function getDb(): Promise<Database> {\n    if (!db) {\n        db = allocDb();\n    }\n    return db;\n}\n\nfunction makeRandomDate() {\n    const d = new Date(2023, 0, 1);\n    d.setDate(d.getDate() + Math.floor(Math.random() * 800));\n    return d;\n}\n\nfunction formatDate(d: Date) {\n    return moment(d).format(\"YYYY-MM-DD\");\n}\n\nfunction startOfQuarter(d: Date) {\n    const m = Math.floor(d.getMonth() / 3) * 3;\n    return formatDate(new Date(d.getFullYear(), m, 1));\n}\n\nfunction startOfMonth(d: Date) {    \n    return formatDate(new Date(d.getFullYear(), d.getMonth(), 1));\n}\n\nfunction pick(count: number, base: number) {\n     return Math.min(count - 1, Math.floor(Math.random() * count)) + base;     \n}\n\nfunction setupDb(db: Database) {\n\n    const workflowStates = [\n        \"Functionality\",\n        \"Reliability\",\n        \"Efficiency\",\n        \"Usability\",\n        \"Stability\"\n    ];\n\n    const sourcesOfError = [\n        \"Test Coverage\",\n        \"Test Success\",\n        \"Errors\"\n    ];\n\n    const dates: Date[] = [];\n    for (let n = 0; n < 50; n++) {\n        dates.push(makeRandomDate());\n    }\n\n    const dateRows = dates.map(x => `\n        ('${formatDate(x)}', ${x.getFullYear()}, '${startOfQuarter(x)}', '${startOfMonth(x)}')`).join(\",\");\n\n    const workflows: string[] = [];\n\n    for (const workflowState of workflowStates) {\n        for (const sourceOfError of sourcesOfError) {\n            for (const resolved of [0, 1]) {\n                for (const fixedByCustomer of [0, 1]) {\n                    workflows.push(`\n                        (${workflows.length + 1}, ${resolved}, '${workflowState}', '${sourceOfError}', ${fixedByCustomer})`);\n                }\n            }\n        }\n    }\n\n    const workflowRows = workflows.join(\",\");\n\n    const categoryCombinations: string[] = [];\n\n    for (const a of [0, 1]) {\n        for (const b of [0, 1]) {\n            for (const c of [0, 1]) {\n                for (const d of [0, 1]) {\n                    for (const e of [0, 1]) {\n                        for (const f of [0, 1]) {\n                            categoryCombinations.push(`\n                                (${categoryCombinations.length}, ${a}, ${b}, ${c}, ${d}, ${e}, ${f})`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    const categoryCombinationsRows = categoryCombinations.join(\",\");\n\n    const bugs: string[] = [];\n\n    for (var n = 0; n < 100; n++) {\n        const workflow = pick(workflows.length, 1);\n        const customer = pick(6, 1);\n        const reported = formatDate(dates[pick(dates.length, 0)]);\n        const resolved = formatDate(dates[pick(dates.length, 0)]);\n        const assigned = formatDate(dates[pick(dates.length, 0)]);\n        const catComb = pick(categoryCombinations.length, 1);\n        const coderAssigned = pick(6, 1);\n        const coderResolved = pick(6, 1);\n\n        bugs.push(`\n            (${n + 1}, ${workflow}, ${customer}, '${reported}', '${resolved}', '${assigned}', ${catComb}, ${coderAssigned}, ${coderResolved})`);\n    }\n\n    const bugRows = bugs.join(\",\");\n\n    const initSql = `\n        create table \\`main\\`.\\`Date\\` (\n            Id date,\n            CalendarYearNumber smallint,\n            FirstDayOfQuarter date,\n            FirstDayOfMonth date\n        );\n\n        insert into \\`main\\`.\\`Date\\` values ${dateRows};\n\n        create table \\`main\\`.\\`Workflow\\` (\n            Id int,\n            Resolved bit,\n            WorkflowState varchar(30),\n            SourceOfError varchar(30),\n            FixedByCustomer bit\n        );\n\n        insert into \\`main\\`.\\`Workflow\\` values ${workflowRows};\n\n        create table \\`main\\`.\\`Category\\` (\n            Id int,\n            Label varchar(30)\n        );\n\n        insert into \\`main\\`.\\`Category\\` values\n            (1, 'Crashed'),\n            (2, 'Data Loss'),\n            (3, 'Security Breach'),\n            (4, 'Off By One'),\n            (5, 'Slow'),\n            (6, 'StackOverflow');\n\n        create table \\`main\\`.\\`Coder\\` (\n            Id int,\n            FullName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Coder\\` values\n                (1, 'Sam'),\n                (2, 'Alex'),\n                (3, 'Drew'),\n                (4, 'Taylor'),\n                (5, 'Parker'),\n                (6, 'Austin');\n\n        create table \\`main\\`.\\`Customer\\` (\n            Id int,\n            CustomerName varchar(30)\n        );\n    \n        insert into \\`main\\`.\\`Customer\\` values\n                (1, 'Quantum LLC'),\n                (2, 'Buns, Inc.'),\n                (3, 'Hats-R-Us'),\n                (4, 'Silence'),\n                (5, 'Egypt'),\n                (6, 'Affordability');\n\n        create table \\`main\\`.\\`CategoryCombination\\` (\n            Id int,\n            StackOverflow bit,\n            Slow bit,\n            OffByOne bit,\n            SecurityBreach bit,\n            DataLoss bit,\n            Crashed bit\n        );\n\n        insert into \\`main\\`.\\`CategoryCombination\\` values ${categoryCombinationsRows};\n\n        create table \\`main\\`.\\`Bug\\` (\n            Id int,\n            WorkflowId int,\n            CustomerId int,\n            ReportedDate date,\n            ResolvedDate date,\n            AssignedDate date,\n            CategoryCombinationId int,\n            AssignedCoderId int,\n            ResolvedCoderId int\n        );\n\n        insert into \\`main\\`.\\`Bug\\` values ${bugRows};\n    `;\n\n    db.run(initSql);\n}\n"]},"metadata":{},"sourceType":"module"}