{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keysOf = exports.distinct = void 0;\n/**\n * Returns the distinct (unique) values from an array. The comparison\n * method is very simplistic: all values are converted to strings\n * before comparison.\n * @param arr\n */\n\nfunction distinct(arr) {\n  var map = {};\n\n  for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {\n    var item = arr_1[_i];\n    map[\"\".concat(item)] = item;\n  }\n\n  return Object.values(map);\n}\n\nexports.distinct = distinct;\n/**\n * Returns the names of properties (i.e. the keys) in an object, statically\n * typed so each has the string literal type of one of the properties. This\n * is not always correct, because the type will include properties inherited\n * from the prototype, where as the values returned at runtime will never\n * include inherited properties. But it's a useful approximation in situations\n * where prototype inheritance can be ignored.\n *\n * @param obj The object to obtain keys from.\n */\n\nfunction keysOf(obj) {\n  return Object.keys(obj);\n}\n\nexports.keysOf = keysOf;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;AAMA,SAAgBA,QAAhB,CAA4BC,GAA5B,EAAoC;AAChC,MAAMC,GAAG,GAAyB,EAAlC;;AAEA,OAAmB,uBAAnB,EAAmBC,iBAAnB,EAAmBA,IAAnB,EAAwB;AAAnB,QAAMC,IAAI,YAAV;AACDF,OAAG,CAAC,UAAGE,IAAH,CAAD,CAAH,GAAiBA,IAAjB;AACH;;AAED,SAAOC,MAAM,CAACC,MAAP,CAAcJ,GAAd,CAAP;AACH;;AARDK;AAUA;;;;;;;;;;;AAUA,SAAgBC,MAAhB,CAAyCC,GAAzC,EAA+C;AAC3C,SAAOJ,MAAM,CAACK,IAAP,CAAYD,GAAZ,CAAP;AACH;;AAFDF","names":["distinct","arr","map","_i","item","Object","values","exports","keysOf","obj","keys"],"sources":["/Users/alex/Documents/Build/test/flowerbi/client/packages/flowerbi/src/arrayHelpers.ts"],"sourcesContent":["/**\n * Returns the distinct (unique) values from an array. The comparison\n * method is very simplistic: all values are converted to strings\n * before comparison.\n * @param arr\n */\nexport function distinct<T>(arr: T[]) {\n    const map: { [key: string]: T } = {};\n\n    for (const item of arr) {\n        map[`${item}`] = item;\n    }\n\n    return Object.values(map);\n}\n\n/**\n * Returns the names of properties (i.e. the keys) in an object, statically\n * typed so each has the string literal type of one of the properties. This\n * is not always correct, because the type will include properties inherited\n * from the prototype, where as the values returned at runtime will never\n * include inherited properties. But it's a useful approximation in situations\n * where prototype inheritance can be ignored.\n *\n * @param obj The object to obtain keys from.\n */\nexport function keysOf<T extends object>(obj: T) {\n    return Object.keys(obj) as (keyof T)[];\n}\n"]},"metadata":{},"sourceType":"script"}